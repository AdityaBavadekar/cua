#!/usr/bin/env bash

# Exit on errors, undefined variables, and propagate errors in pipes
set -eo pipefail

# Always use the current working directory as the build context
SCRIPT_DIR="$(pwd)"
DEBUG=${LUMIER_DEBUG:-0}

usage() {
    cat <<EOF
Lumier - Docker container wrapper for lume Virtual Machines

Usage: $(basename "$0") COMMAND [OPTIONS]

Commands:
  run [DOCKER_ARGS]       Build (if needed) and run the Lumier container with Docker args
  build [DOCKER_ARGS]     Build the Lumier Docker image with optional Docker args
  push [TAG]              Push the Lumier image to Docker Hub with optional tag
  pull                    Pull the trycua/lumier:latest image from Docker Hub
  help                    Show this help message

Docker Container Environment Variables:
  These can be set using Docker's -e flag:
  
  VM_NAME                 Set the VM name (default: lumier)
  VERSION                 Set the VM image (default: ghcr.io/trycua/macos-sequoia-vanilla:latest)
  CPU_CORES               Set the number of CPU cores (default: 4)
  RAM_SIZE                Set the memory size in MB (default: 8192)
  HOST_STORAGE_PATH       Path to mount as shared directory in the VM
  HOST_SHARED_PATH        Path to mount as shared directory in the VM
  LUMIER_DEBUG            Enable debug mode (set to 1)

Script Environment Variables:
  LUMIER_IMAGE            Docker image name (default: lumier:latest)

Examples:
  # Run a VM with default settings
  $(basename "$0") run -it --rm
  
  # Run a VM with custom settings using Docker's -e flag
  $(basename "$0") run -it --rm \\
      --name custom-container-name \\
      -e VM_NAME=my-vm \\
      -e VERSION=ghcr.io/trycua/macos-sequoia-cua:latest \\
      -e RAM_SIZE=16384 \\
      -v $(pwd)/mount:/shared

  # Build with a custom image name
  LUMIER_IMAGE=myorg/lumier:v1 $(basename "$0") build

  # Push to Docker Hub
  $(basename "$0") push v1.0.0
  
  # Push with a custom image name
  LUMIER_IMAGE=myorg/lumier:v1 $(basename "$0") push
  
  # Pull trycua/lumier:latest from Docker Hub
  $(basename "$0") pull
EOF
}

# Build the Docker image with cache busting
build_image() {
    local image_name="${LUMIER_IMAGE:-lumier:latest}"
    echo "Building Lumier Docker image: $image_name"
    echo "SCRIPT_DIR=$SCRIPT_DIR"
    echo "Checking for Dockerfile at: $SCRIPT_DIR/Dockerfile"
    ls -l "$SCRIPT_DIR/Dockerfile" || echo "Dockerfile not found at $SCRIPT_DIR/Dockerfile"
    
    # Pass any additional arguments to docker build with cache busting
    docker build --build-arg CACHEBUST=$(date +%s) -t "$image_name" "$SCRIPT_DIR" "$@"
    
    echo "Lumier image built successfully: $image_name"
}

# Push the Docker image to Docker Hub
push_image() {
    local image_name="${LUMIER_IMAGE:-lumier:latest}"
    local tag="${1:-latest}"
    
    # Ensure the Docker image exists
    if ! docker image inspect "$image_name" &>/dev/null; then
        echo "Docker image '$image_name' not found. Building it..."
        build_image
    fi
    
    # If the image doesn't have a Docker Hub repository format, use the tag argument
    if [[ "$image_name" != *"/"* && "$image_name" != "ghcr.io/"* ]]; then
        # If tag was provided and the image name doesn't already have a tag
        if [[ -n "$tag" && "$image_name" != *":"* ]]; then
            # Extract the base name without any tag
            local base_name="${image_name%%:*}"
            # Tag the image for Docker Hub with the provided tag
            local hub_image="${DOCKER_USERNAME:-trycua}/$base_name:$tag"
            echo "Tagging image $image_name as $hub_image"
            docker tag "$image_name" "$hub_image"
            image_name="$hub_image"
        else
            # Tag with Docker Hub username but keep the existing tag
            local base_name_with_tag="$image_name"
            local hub_image="${DOCKER_USERNAME:-trycua}/$base_name_with_tag"
            echo "Tagging image $image_name as $hub_image"
            docker tag "$image_name" "$hub_image"
            image_name="$hub_image"
        fi
    elif [[ "$image_name" != *":"* && -n "$tag" ]]; then
        # If the image has a repo format but no tag, add the provided tag
        image_name="${image_name}:${tag}"
        echo "Using image name with tag: $image_name"
    fi
    
    echo "Pushing image to Docker Hub: $image_name"
    docker push "$image_name"
    echo "Image pushed successfully: $image_name"
}

# Pull the trycua/lumier:latest image from Docker Hub
pull_image() {
    local image_name="trycua/lumier:latest"
    
    echo "Pulling image from Docker Hub: $image_name"
    docker pull "$image_name"
    
    # Check if the pull was successful
    if docker image inspect "$image_name" &>/dev/null; then
        echo "Image pulled successfully: $image_name"
        
        # If LUMIER_IMAGE is set to something else, tag the pulled image with that name
        if [[ -n "${LUMIER_IMAGE}" && "${LUMIER_IMAGE}" != "$image_name" ]]; then
            echo "Tagging pulled image as ${LUMIER_IMAGE}"
            docker tag "$image_name" "${LUMIER_IMAGE}"
            echo "Image tagged successfully as ${LUMIER_IMAGE}"
        fi
    else
        echo "Failed to pull image: $image_name"
        exit 1
    fi
}

# Run the Docker container
run_container() {
    local image_name="${LUMIER_IMAGE:-lumier:latest}"
    
    # Ensure the Docker image exists locally
    if ! docker image inspect "$image_name" &>/dev/null; then
        echo "Lumier image '$image_name' not found locally."
        # Check if it exists on Docker Hub (only for the default image)
        if [[ "$image_name" == "lumier:latest" ]]; then
            echo "Attempting to pull trycua/lumier:latest from Docker Hub..."
            if docker pull trycua/lumier:latest; then
                echo "Successfully pulled trycua/lumier:latest."
                image_name="trycua/lumier:latest" # Use the pulled image
            else
                echo "Failed to pull image from Docker Hub. Building locally..."
                build_image
            fi
        else
             echo "Building image locally..."
             build_image # Build other images if not found
        fi
    fi
    
    # Extract volume paths from arguments if provided
    STORAGE_PATH="${HOST_STORAGE_PATH:-./storage}"
    SHARED_PATH="${HOST_SHARED_PATH:-./shared}"
    
    # Parse user-provided volume arguments to extract paths
    local prev_was_v=false
    for arg in "$@"; do
        if $prev_was_v; then
            # Format is HOST_PATH:CONTAINER_PATH
            local host_path=${arg%%:*}
            local container_path=${arg#*:}
            
            # Update the paths based on container mount points
            if [[ "$container_path" == "/storage" ]]; then
                # Use the exact path provided by the user without calling realpath
                STORAGE_PATH="$host_path"
            elif [[ "$container_path" == "/shared" ]]; then
                # Use the exact path provided by the user without calling realpath
                SHARED_PATH="$host_path"
            fi
            prev_was_v=false
        elif [[ "$arg" == "-v" ]]; then
            prev_was_v=true
        elif [[ "$arg" == --volume=* ]]; then
            # Handle --volume=HOST:CONTAINER format
            local volume_spec=${arg#--volume=}
            local host_path=${volume_spec%%:*}
            local container_path=${volume_spec#*:}
            
            if [[ "$container_path" == "/storage" ]]; then
                # Use the exact path provided by the user without calling realpath
                STORAGE_PATH="$host_path"
            elif [[ "$container_path" == "/shared" ]]; then
                # Use the exact path provided by the user without calling realpath
                SHARED_PATH="$host_path"
            fi
        fi
    done
    
    # Note: Docker will automatically create these directories if they don't exist

    # Only add -e if not already present in args
    DOCKER_ARGS=( )
    add_env_var() {
        local var="$1"; local val="$2"; local flag="-e $var="
        for arg in "$@"; do
            [[ "$arg" == *"$flag"* ]] && return 0
        done
        DOCKER_ARGS+=( -e "$var=$val" )
    }
    add_env_var HOST_STORAGE_PATH "$STORAGE_PATH"
    add_env_var HOST_SHARED_PATH "$SHARED_PATH"

    # Detect --name argument and set VM_NAME if not already present
    local container_name=""
    local prev_arg=""
    for arg in "$@"; do
        if [[ "$prev_arg" == "--name" ]]; then
            container_name="$arg"
            break
        elif [[ "$arg" == --name=* ]]; then
            container_name="${arg#--name=}"
            break
        fi
        prev_arg="$arg"
    done
    # Only add -e VM_NAME if not already present and container_name is set
    local vm_name_set=false
    for arg in "$@"; do
        if [[ "$arg" == "-e" ]] && [[ "$2" == VM_NAME=* ]]; then
            vm_name_set=true
            break
        elif [[ "$arg" == "-eVM_NAME="* ]]; then
            vm_name_set=true
            break
        elif [[ "$arg" == "-e"* ]] && [[ "$arg" == *"VM_NAME="* ]]; then
            vm_name_set=true
            break
        fi
    done
    if [[ -n "$container_name" && "$vm_name_set" != true ]]; then
        DOCKER_ARGS+=( -e "VM_NAME=$container_name" )
    fi

    echo "Running Lumier container with image: $image_name"
    if [[ "$*" == *"-p 8006:8006"* || "$*" == *"-p"*"8006:8006"* ]]; then
        docker run "${DOCKER_ARGS[@]}" "$@" "$image_name"
    else
        docker run "${DOCKER_ARGS[@]}" -p 8006:8006 "$@" "$image_name"
    fi
}

# Main command handling
case "${1:-help}" in
    run)
        shift
        run_container "$@"
        ;;
    build)
        shift
        build_image "$@"
        ;;
    push)
        shift
        push_image "$@"
        ;;
    pull)
        pull_image
        ;;
    help)
        usage
        ;;
    *)
        echo "Unknown command: $1"
        usage
        exit 1
        ;;
esac 