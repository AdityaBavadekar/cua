name: Publish Notarized Lume

on:
  push:
    tags:
      - 'lume-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to notarize (without v prefix)'
        required: true
        default: '0.1.0'
  workflow_call:
    inputs:
      version:
        description: 'Version to notarize'
        required: true
        type: string
    secrets:
      APPLICATION_CERT_BASE64:
        required: true
      INSTALLER_CERT_BASE64:
        required: true
      CERT_PASSWORD:
        required: true
      APPLE_ID:
        required: true
      TEAM_ID:
        required: true
      APP_SPECIFIC_PASSWORD:
        required: true
      DEVELOPER_NAME:
        required: true

permissions:
  contents: write

env:
  APPLICATION_CERT_BASE64: ${{ secrets.APPLICATION_CERT_BASE64 }}
  INSTALLER_CERT_BASE64: ${{ secrets.INSTALLER_CERT_BASE64 }}
  CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
  APPLE_ID: ${{ secrets.APPLE_ID }}
  TEAM_ID: ${{ secrets.TEAM_ID }}
  APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
  DEVELOPER_NAME: ${{ secrets.DEVELOPER_NAME }}

jobs:
  notarize:
    runs-on: macos-15
    outputs:
      sha256_checksums: ${{ steps.generate_checksums.outputs.checksums }}
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16
        run: |
          sudo xcode-select -s /Applications/Xcode_16.app
          xcodebuild -version

      - name: Install dependencies
        run: |
          brew install cpio

      - name: Create .release directory
        run: mkdir -p .release

      - name: Import Certificates
        env:
          APPLICATION_CERT_BASE64: ${{ secrets.APPLICATION_CERT_BASE64 }}
          INSTALLER_CERT_BASE64: ${{ secrets.INSTALLER_CERT_BASE64 }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: "temp_password"
        run: |
          # Create a temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain

          # Import certificates
          echo $APPLICATION_CERT_BASE64 | base64 --decode > application.p12
          echo $INSTALLER_CERT_BASE64 | base64 --decode > installer.p12
          
          security import application.p12 -k build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/pkgbuild
          security import installer.p12 -k build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/pkgbuild
          
          # Allow codesign to access the certificates
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # List the certificates to ensure they were imported correctly
          security find-identity -v -p codesigning
          
          # Clean up certificate files
          rm application.p12 installer.p12

      - name: Build and Notarize
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          # These will now reference the imported certificates
          CERT_APPLICATION_NAME: "Developer ID Application: ${{ secrets.DEVELOPER_NAME }} (${{ secrets.TEAM_ID }})"
          CERT_INSTALLER_NAME: "Developer ID Installer: ${{ secrets.DEVELOPER_NAME }} (${{ secrets.TEAM_ID }})"
        working-directory: ./libs/lume
        run: |
          # Debug information
          pwd
          ls -la
          echo "Swift version:"
          swift --version
          
          # Ensure .release directory exists
          mkdir -p .release
          chmod 755 .release
          
          # Show available signing identities
          echo "Available signing identities:"
          security find-identity -v -p codesigning
          
          # Build the project first
          swift build --configuration release
          
          # Debug build output
          ls -la .build/release/
          
          # Try signing manually to test certificate
          echo "Testing code signing with certificate"
          codesign --force --options runtime \
                 --entitlement ./resources/lume.entitlements \
                 --sign "$CERT_APPLICATION_NAME" \
                 .build/release/lume
          
          # Create test directory for pkgbuild
          TEST_ROOT=$(mktemp -d)
          mkdir -p "$TEST_ROOT/usr/local/bin"
          cp -f .build/release/lume "$TEST_ROOT/usr/local/bin/"
          
          # Test pkgbuild with verbose output
          echo "Testing pkgbuild with certificate"
          pkgbuild --root "$TEST_ROOT" \
                 --identifier "com.trycua.lume" \
                 --version "1.0" \
                 --install-location "/" \
                 --sign "$CERT_INSTALLER_NAME" \
                 --verbose \
                 ./.release/test.pkg
          
          # Make script executable and run it if signing works
          if [ -f "./.release/test.pkg" ]; then
            echo "Test package created successfully, proceeding with build script"
            chmod +x scripts/build/build-release-notarized.sh
            cd scripts/build
            ./build-release-notarized.sh
          else
            echo "Test package creation failed, aborting script execution"
            exit 1
          fi

      - name: Generate SHA256 Checksums
        id: generate_checksums
        working-directory: ./libs/lume/.release
        run: |
          echo "## SHA256 Checksums" > checksums.txt
          echo '```' >> checksums.txt
          shasum -a 256 lume.tar.gz >> checksums.txt
          echo '```' >> checksums.txt
          checksums=$(cat checksums.txt)
          echo "checksums<<EOF" >> $GITHUB_OUTPUT
          echo "$checksums" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload Notarized Package
        uses: actions/upload-artifact@v4
        with:
          name: lume-notarized
          path: |
            ./libs/lume/.release/lume.tar.gz
            ./libs/lume/.release/lume.pkg.tar.gz

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./libs/lume/.release/lume.tar.gz
            ./libs/lume/.release/lume.pkg.tar.gz
          body: |
            ${{ steps.generate_checksums.outputs.checksums }}
          generate_release_notes: true 